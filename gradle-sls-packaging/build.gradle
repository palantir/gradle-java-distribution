apply plugin: 'com.gradle.plugin-publish'
// java-gradle-plugin MUST be applied before publish-jar.gradle
apply plugin: 'java-gradle-plugin'
apply from: "${rootDir}/gradle/publish-jar.gradle"
apply plugin: 'groovy'
apply plugin: 'org.inferred.processors'
apply plugin: 'de.undercouch.download'

dependencies {
    processor 'org.immutables:value'

    compile project(':sls-versions')
    compile gradleApi()
    compile 'com.fasterxml.jackson.core:jackson-databind'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    compile 'com.palantir.sls.versions:sls-versions'

    testCompile gradleTestKit()
    testCompile 'com.netflix.nebula:nebula-test'
}

pluginBundle {
    website = 'https://github.com/palantir/sls-packaging'
    vcsUrl = 'https://github.com/palantir/sls-packaging'
    description = 'Creates a distributable package containing libraries and scripts necessary to easily deploy and run a Java project.'
    tags = ['distribution', 'application']

    plugins {
        javaServiceDistributionPlugin {
            id = 'com.palantir.sls-java-service-distribution'
            displayName = 'Creates SLS Java services distributions'
        }
        assetDistributionPlugin {
            id = 'com.palantir.sls-asset-distribution'
            displayName = 'Creates SLS asset distributions'
        }
        podDistributionPlugin {
            id = 'com.palantir.sls-pod-distribution'
            displayName = 'Creates SLS pod distributions'
        }
    }

    // Fix for publishPlugins not working with dependency recommenders (nebula, in our case).
    // Gradle suggests the 'withDependencies' approach in the following workaround:
    // http://plugins.gradle.org/help/plugin/missing-dependency-version
    // TODO(dsanduleac): this is bad and we want to remove it
    withDependencies {
        it.each { dep ->
            if (!dep.version) {
                dep.version = dependencyRecommendations.getRecommendedVersion(dep.groupId, dep.artifactId)
            }
        }
    }
}

def yourkitVersion = "2017.02-b75"
def yourkitFilename = "YourKit-JavaProfiler-${yourkitVersion}"

task downloadYourkitDist(type: Download) {
    src "https://www.yourkit.com/download/${yourkitFilename}.zip"
    dest buildDir
    tempAndMove true
    onlyIfModified true
}

task verifyYourkitDist(type: Verify, dependsOn: downloadYourkitDist) {
    src file("${buildDir}/${yourkitFilename}.zip")
    algorithm 'SHA-256'
    checksum '562d566c710f00f6b5d72a5ea29111896cccc634485f27fc7397d32bae971d54'
}

task extractYourkitAgent(type: Copy, dependsOn: verifyYourkitDist) {
    from zipTree(file("${buildDir}/${yourkitFilename}.zip"))
    include '**/linux-x86-64/libyjpagent.so'
    eachFile { path = name } // Flatten directory with single file
    into file("${buildDir}/resources/main/linux-x86-64")
    includeEmptyDirs = false // Cleanup empty Yourkit dist directories
}

tasks.idea.dependsOn extractYourkitAgent
tasks.compileJava.dependsOn extractYourkitAgent

publishPlugins.onlyIf {
    project.version ==~ /[0-9]+(\.[0-9]+)+(-rc[0-9]+)?(-alpha[0-9]+)?/
}

test {
    maxHeapSize = '1g'
}

// Configure the publishPlugins task
tasks.publish.dependsOn publishPlugins
project.ext.'gradle.publish.key' = System.env["GRADLE_KEY"]
project.ext.'gradle.publish.secret' = System.env["GRADLE_SECRET"]
